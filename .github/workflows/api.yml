name: "API Development pipeline"
on:
  push:
    branches: [ 'main' ]
    paths: 
      - 'api/**'
      - '.github/workflows/api.yml'
  pull_request:
    branches: [ 'main' ]
    paths: 
      - 'api/**'
      - '.github/workflows/api.yml'
  
jobs:
  build:
    defaults:
      run:
        working-directory: ./api
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
        node-version: 
          - '16.x'
    steps:
      - uses: actions/checkout@v2
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: yarn install and build
        run: |
          yarn install
          yarn build

      - run: yarn test

      - name: prepare production node_modules for lambda layer
        run: |
          rm -fr node_modules
          yarn install --prod --frozen-lockfile --link-duplicates
          mkdir -p layers/node_modules/nodejs
          mv node_modules layers/node_modules/nodejs

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.6
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ./infrastructure-api

      - name: Terraform Init
        id: init
        run: terraform init -var-file="prod.tfvars" -backend-config="backend.prod.hcl"
        working-directory: ./infrastructure-api

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./infrastructure-api

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="prod.tfvars" -out prod.plan
        continue-on-error: true
        working-directory: ./infrastructure-api

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    
      - name: Stop pipeline if terraform plan failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply prod.plan
        working-directory: ./infrastructure-api
